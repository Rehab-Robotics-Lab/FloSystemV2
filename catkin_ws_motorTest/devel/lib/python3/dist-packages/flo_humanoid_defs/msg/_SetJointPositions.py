# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from flo_humanoid_defs/SetJointPositions.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetJointPositions(genpy.Message):
  _md5sum = "009ce4d7a30096c5b116ae7327067969"
  _type = "flo_humanoid_defs/SetJointPositions"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Message definition to set the position of all the joints of 1 arm in the humanoid robot
#(4 joints in each arm, 2 at the shoulder and 2 at the elbow) 
uint8 id1
uint8 id2
uint8 id3
uint8 id4
string item1
string item2
string item3
string item4
int32 value1
int32 value2
int32 value3
int32 value4



"""
  __slots__ = ['id1','id2','id3','id4','item1','item2','item3','item4','value1','value2','value3','value4']
  _slot_types = ['uint8','uint8','uint8','uint8','string','string','string','string','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id1,id2,id3,id4,item1,item2,item3,item4,value1,value2,value3,value4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetJointPositions, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id1 is None:
        self.id1 = 0
      if self.id2 is None:
        self.id2 = 0
      if self.id3 is None:
        self.id3 = 0
      if self.id4 is None:
        self.id4 = 0
      if self.item1 is None:
        self.item1 = ''
      if self.item2 is None:
        self.item2 = ''
      if self.item3 is None:
        self.item3 = ''
      if self.item4 is None:
        self.item4 = ''
      if self.value1 is None:
        self.value1 = 0
      if self.value2 is None:
        self.value2 = 0
      if self.value3 is None:
        self.value3 = 0
      if self.value4 is None:
        self.value4 = 0
    else:
      self.id1 = 0
      self.id2 = 0
      self.id3 = 0
      self.id4 = 0
      self.item1 = ''
      self.item2 = ''
      self.item3 = ''
      self.item4 = ''
      self.value1 = 0
      self.value2 = 0
      self.value3 = 0
      self.value4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.id1, _x.id2, _x.id3, _x.id4))
      _x = self.item1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.value1, _x.value2, _x.value3, _x.value4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.id1, _x.id2, _x.id3, _x.id4,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item4 = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value1, _x.value2, _x.value3, _x.value4,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.id1, _x.id2, _x.id3, _x.id4))
      _x = self.item1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.item4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4i().pack(_x.value1, _x.value2, _x.value3, _x.value4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.id1, _x.id2, _x.id3, _x.id4,) = _get_struct_4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.item4 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.item4 = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value1, _x.value2, _x.value3, _x.value4,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
