// Generated by gencpp from file flo_humanoid_defs/SetJointPosition.msg
// DO NOT EDIT!


#ifndef FLO_HUMANOID_DEFS_MESSAGE_SETJOINTPOSITION_H
#define FLO_HUMANOID_DEFS_MESSAGE_SETJOINTPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flo_humanoid_defs
{
template <class ContainerAllocator>
struct SetJointPosition_
{
  typedef SetJointPosition_<ContainerAllocator> Type;

  SetJointPosition_()
    : id(0)
    , position(0)  {
    }
  SetJointPosition_(const ContainerAllocator& _alloc)
    : id(0)
    , position(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef int32_t _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointPosition_

typedef ::flo_humanoid_defs::SetJointPosition_<std::allocator<void> > SetJointPosition;

typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointPosition > SetJointPositionPtr;
typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointPosition const> SetJointPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flo_humanoid_defs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a775458729eb3272bc88b4f5f764cc8";
  }

  static const char* value(const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a775458729eb327ULL;
  static const uint64_t static_value2 = 0x2bc88b4f5f764cc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flo_humanoid_defs/SetJointPosition";
  }

  static const char* value(const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#message definition to set the positon of one joint of the humanoid robot\n"
"uint8 id\n"
"int32 position\n"
;
  }

  static const char* value(const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flo_humanoid_defs::SetJointPosition_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLO_HUMANOID_DEFS_MESSAGE_SETJOINTPOSITION_H
