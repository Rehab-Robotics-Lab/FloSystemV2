// Generated by gencpp from file flo_humanoid_defs/GetJointPositionsRequest.msg
// DO NOT EDIT!


#ifndef FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSREQUEST_H
#define FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flo_humanoid_defs
{
template <class ContainerAllocator>
struct GetJointPositionsRequest_
{
  typedef GetJointPositionsRequest_<ContainerAllocator> Type;

  GetJointPositionsRequest_()
    : id1(0)
    , id2(0)
    , id3(0)
    , id4(0)
    , item1()
    , item2()
    , item3()
    , item4()  {
    }
  GetJointPositionsRequest_(const ContainerAllocator& _alloc)
    : id1(0)
    , id2(0)
    , id3(0)
    , id4(0)
    , item1(_alloc)
    , item2(_alloc)
    , item3(_alloc)
    , item4(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id1_type;
  _id1_type id1;

   typedef uint8_t _id2_type;
  _id2_type id2;

   typedef uint8_t _id3_type;
  _id3_type id3;

   typedef uint8_t _id4_type;
  _id4_type id4;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item1_type;
  _item1_type item1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item2_type;
  _item2_type item2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item3_type;
  _item3_type item3;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item4_type;
  _item4_type item4;





  typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointPositionsRequest_

typedef ::flo_humanoid_defs::GetJointPositionsRequest_<std::allocator<void> > GetJointPositionsRequest;

typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsRequest > GetJointPositionsRequestPtr;
typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsRequest const> GetJointPositionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id1 == rhs.id1 &&
    lhs.id2 == rhs.id2 &&
    lhs.id3 == rhs.id3 &&
    lhs.id4 == rhs.id4 &&
    lhs.item1 == rhs.item1 &&
    lhs.item2 == rhs.item2 &&
    lhs.item3 == rhs.item3 &&
    lhs.item4 == rhs.item4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flo_humanoid_defs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc1049a606d2c03fa6e9bc8c35d738bf";
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc1049a606d2c03fULL;
  static const uint64_t static_value2 = 0xa6e9bc8c35d738bfULL;
};

template<class ContainerAllocator>
struct DataType< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flo_humanoid_defs/GetJointPositionsRequest";
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Service definition to get the position of all the joints of 1 arm in the humanoid robot\n"
"#(5 joints in each arm, 2 at the shoulder, 2 at the elbow and 1 at the end effector)\n"
"uint8 id1\n"
"uint8 id2\n"
"uint8 id3\n"
"uint8 id4\n"
"string item1\n"
"string item2\n"
"string item3\n"
"string item4\n"
;
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id1);
      stream.next(m.id2);
      stream.next(m.id3);
      stream.next(m.id4);
      stream.next(m.item1);
      stream.next(m.item2);
      stream.next(m.item3);
      stream.next(m.item4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointPositionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flo_humanoid_defs::GetJointPositionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "id1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id1);
    s << indent << "id2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id2);
    s << indent << "id3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id3);
    s << indent << "id4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id4);
    s << indent << "item1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item1);
    s << indent << "item2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item2);
    s << indent << "item3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item3);
    s << indent << "item4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSREQUEST_H
