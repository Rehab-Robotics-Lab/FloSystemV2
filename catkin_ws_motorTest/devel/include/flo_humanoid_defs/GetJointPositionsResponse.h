// Generated by gencpp from file flo_humanoid_defs/GetJointPositionsResponse.msg
// DO NOT EDIT!


#ifndef FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSRESPONSE_H
#define FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flo_humanoid_defs
{
template <class ContainerAllocator>
struct GetJointPositionsResponse_
{
  typedef GetJointPositionsResponse_<ContainerAllocator> Type;

  GetJointPositionsResponse_()
    : value1(0)
    , value2(0)
    , value3(0)
    , value4(0)  {
    }
  GetJointPositionsResponse_(const ContainerAllocator& _alloc)
    : value1(0)
    , value2(0)
    , value3(0)
    , value4(0)  {
  (void)_alloc;
    }



   typedef int32_t _value1_type;
  _value1_type value1;

   typedef int32_t _value2_type;
  _value2_type value2;

   typedef int32_t _value3_type;
  _value3_type value3;

   typedef int32_t _value4_type;
  _value4_type value4;





  typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointPositionsResponse_

typedef ::flo_humanoid_defs::GetJointPositionsResponse_<std::allocator<void> > GetJointPositionsResponse;

typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsResponse > GetJointPositionsResponsePtr;
typedef boost::shared_ptr< ::flo_humanoid_defs::GetJointPositionsResponse const> GetJointPositionsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.value1 == rhs.value1 &&
    lhs.value2 == rhs.value2 &&
    lhs.value3 == rhs.value3 &&
    lhs.value4 == rhs.value4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flo_humanoid_defs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2634433e5ea4fe3504968f759463290";
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2634433e5ea4fe3ULL;
  static const uint64_t static_value2 = 0x504968f759463290ULL;
};

template<class ContainerAllocator>
struct DataType< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flo_humanoid_defs/GetJointPositionsResponse";
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 value1\n"
"int32 value2\n"
"int32 value3\n"
"int32 value4\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value1);
      stream.next(m.value2);
      stream.next(m.value3);
      stream.next(m.value4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointPositionsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flo_humanoid_defs::GetJointPositionsResponse_<ContainerAllocator>& v)
  {
    s << indent << "value1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value1);
    s << indent << "value2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value2);
    s << indent << "value3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value3);
    s << indent << "value4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLO_HUMANOID_DEFS_MESSAGE_GETJOINTPOSITIONSRESPONSE_H
