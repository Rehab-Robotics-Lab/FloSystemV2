// Generated by gencpp from file flo_humanoid_defs/SetJointVelocity.msg
// DO NOT EDIT!


#ifndef FLO_HUMANOID_DEFS_MESSAGE_SETJOINTVELOCITY_H
#define FLO_HUMANOID_DEFS_MESSAGE_SETJOINTVELOCITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flo_humanoid_defs
{
template <class ContainerAllocator>
struct SetJointVelocity_
{
  typedef SetJointVelocity_<ContainerAllocator> Type;

  SetJointVelocity_()
    : id(0)
    , endposition(0)
    , velocity(0)  {
    }
  SetJointVelocity_(const ContainerAllocator& _alloc)
    : id(0)
    , endposition(0)
    , velocity(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef int32_t _endposition_type;
  _endposition_type endposition;

   typedef int32_t _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointVelocity_

typedef ::flo_humanoid_defs::SetJointVelocity_<std::allocator<void> > SetJointVelocity;

typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointVelocity > SetJointVelocityPtr;
typedef boost::shared_ptr< ::flo_humanoid_defs::SetJointVelocity const> SetJointVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.endposition == rhs.endposition &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator1> & lhs, const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flo_humanoid_defs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "849c7d5675e0a15566e7a31f1fcf93be";
  }

  static const char* value(const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x849c7d5675e0a155ULL;
  static const uint64_t static_value2 = 0x66e7a31f1fcf93beULL;
};

template<class ContainerAllocator>
struct DataType< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flo_humanoid_defs/SetJointVelocity";
  }

  static const char* value(const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Message definition to set the velocity of the end effector\n"
"uint8 id\n"
"int32 endposition\n"
"int32 velocity\n"
;
  }

  static const char* value(const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.endposition);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flo_humanoid_defs::SetJointVelocity_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "endposition: ";
    Printer<int32_t>::stream(s, indent + "  ", v.endposition);
    s << indent << "velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLO_HUMANOID_DEFS_MESSAGE_SETJOINTVELOCITY_H
